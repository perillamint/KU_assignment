From 9c3e15e7353b70554cc06e1d2377055acac5a088 Mon Sep 17 00:00:00 2001
From: perillamint <perillamint@gmail.com>
Date: Thu, 30 Apr 2015 02:29:28 +0900
Subject: [PATCH] 2nd-assign: add tag to process and prevent kill.

---
 2nd_assign/Makefile                |   4 ++
 2nd_assign/main.c                  | 131 +++++++++++++++++++++++++++++++++++++
 Makefile                           |   2 +-
 arch/x86/include/asm/unistd_32.h   |   2 +
 arch/x86/include/asm/unistd_64.h   |   4 ++
 arch/x86/kernel/syscall_table_32.S |   2 +
 include/linux/init_task.h          |   1 +
 include/linux/sched.h              |   7 ++
 include/linux/syscalls.h           |   2 +
 security/selinux/hooks.c           |  17 +++++
 10 files changed, 171 insertions(+), 1 deletion(-)
 create mode 100644 2nd_assign/Makefile
 create mode 100644 2nd_assign/main.c

diff --git a/2nd_assign/Makefile b/2nd_assign/Makefile
new file mode 100644
index 0000000..e371317
--- /dev/null
+++ b/2nd_assign/Makefile
@@ -0,0 +1,4 @@
+obj-y := 2nd_assign.o
+
+# in-kernel queue implementation.
+2nd_assign-objs += main.o
diff --git a/2nd_assign/main.c b/2nd_assign/main.c
new file mode 100644
index 0000000..12ef862
--- /dev/null
+++ b/2nd_assign/main.c
@@ -0,0 +1,131 @@
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+
+asmlinkage long sys_set_task_tag (pid_t pid, const char __user *tagstr, long taglen)
+{
+  long i;
+  long retval;
+  struct task_struct *task;
+  struct task_tag *tag;
+
+  printk(KERN_DEBUG "syscall: sys_set_task_tag\n");
+
+  read_lock(&tasklist_lock);
+  task = find_task_by_vpid(pid);
+  read_unlock(&tasklist_lock);
+
+  if(task == NULL) {
+    printk(KERN_ERR "Oops. pid %d is not a process!\n", pid);
+    return -EINVAL;
+  }
+  
+  printk(KERN_DEBUG "task found. %p\n", task);
+
+  if(tagstr == NULL) {
+    printk(KERN_DEBUG "tagstr is null. deleting tag..");
+    if (task -> tag) {
+      if(task -> tag -> tag) {
+	kfree(task -> tag -> tag);
+      }
+      kfree(task -> tag);
+    }
+
+    task -> tag = NULL;
+    return 0;
+  }
+
+  tag = kmalloc(sizeof(struct task_tag), GFP_KERNEL);
+
+  if(tag == NULL) {
+    printk(KERN_ERR "Oops. Not enough memory.\n");
+    return -ENOMEM;
+  }
+  
+  printk(KERN_DEBUG "tag_struct allocated. address: %p\n", tag);
+
+  tag -> taglen = taglen;
+  tag -> tag = kmalloc(taglen, GFP_KERNEL);
+  
+  if(tag -> tag == NULL) {
+    printk(KERN_ERR "Oops. Not enough memory. Freeing tag.\n");
+    kfree(tag);
+    return -ENOMEM;
+  }
+
+  printk(KERN_DEBUG "tagstr allocated. address: %p\n", tag -> tag);
+  
+  retval = copy_from_user(tag -> tag, tagstr, taglen);
+
+  if(retval != 0) {
+    printk(KERN_ERR "Oops. copy_from_user cannot copy all of tag string.\n"
+	   "copy_from_user could not copy %ld bytes.\n", retval);
+
+    kfree(tag -> tag);
+    kfree(tag);
+    return -EINVAL;
+  }
+
+  for (i = 0; i < taglen; i++) {
+    if(tag -> tag[i] == 0) {
+      break;
+    }
+  }
+
+  if(i == taglen) {
+    printk(KERN_ERR "ERR: String does not ends with NULL.");
+    kfree(tag -> tag);
+    kfree(tag);
+
+    return -EINVAL;
+  }
+
+  printk(KERN_DEBUG "copied tagstr to tag -> tag. value is %s\n", tag -> tag);
+
+  task -> tag = tag;
+  printk(KERN_DEBUG "tag assigned to pid %d.\n", pid);
+  return 0;
+}
+
+asmlinkage long sys_get_task_tag(pid_t pid, const char __user *tagstr, long taglen) {
+  long retval;
+  struct task_struct *task;
+  
+  read_lock(&tasklist_lock);
+  task = find_task_by_vpid(pid);
+  read_unlock(&tasklist_lock);
+
+  printk(KERN_DEBUG "syscall: sys_get_task_tag\n");
+
+  if(task == NULL) {
+    printk(KERN_ERR "Oops. pid %d is not a process!\n", pid);
+    return -EINVAL;
+  }
+  
+  printk(KERN_DEBUG "task found. %p\n", task);
+
+  if(task -> tag == NULL) {
+    printk(KERN_DEBUG "No tag found.\n");
+    return 0;
+  }
+
+  if(tagstr == NULL || taglen < task -> tag -> taglen) {
+    printk(KERN_DEBUG "Returning length %ld\n", task -> tag -> taglen);
+    return task -> tag -> taglen;
+  }
+
+  retval = copy_to_user ((void*)tagstr, task -> tag -> tag, task -> tag -> taglen);
+
+  if(retval != 0) {
+    printk(KERN_ERR "Oops. copy_to_user cannot copy all of tag string.\n"
+	   "copy_to_user could not copy %ld bytes.\n", retval);
+    
+    return task -> tag -> taglen;
+  }
+
+  printk(KERN_DEBUG "tag copied. tag is %s\n", task -> tag -> tag);
+
+  return task -> tag -> taglen;
+}
diff --git a/Makefile b/Makefile
index 38f995d..01a5021 100644
--- a/Makefile
+++ b/Makefile
@@ -481,7 +481,7 @@ init-y		:= init/
 drivers-y	:= drivers/ sound/ firmware/
 net-y		:= net/
 libs-y		:= lib/
-core-y		:= usr/ 1st_assign/
+core-y		:= usr/ 1st_assign/ 2nd_assign/
 endif # KBUILD_EXTMOD
 
 ifeq ($(dot-config),1)
diff --git a/arch/x86/include/asm/unistd_32.h b/arch/x86/include/asm/unistd_32.h
index 3544bdf..2299daf 100644
--- a/arch/x86/include/asm/unistd_32.h
+++ b/arch/x86/include/asm/unistd_32.h
@@ -345,6 +345,8 @@
 #define __NR_recvmmsg		337
 #define __NR_my_enqueue         338
 #define __NR_my_dequeue         339
+#define __NR_set_task_tag       340
+#define __NR_get_task_tag       341
 
 #ifdef __KERNEL__
 
diff --git a/arch/x86/include/asm/unistd_64.h b/arch/x86/include/asm/unistd_64.h
index a837d4d..28c1c2c 100644
--- a/arch/x86/include/asm/unistd_64.h
+++ b/arch/x86/include/asm/unistd_64.h
@@ -667,6 +667,10 @@ __SYSCALL(__NR_recvmmsg, sys_recvmmsg)
 __SYSCALL(__NR_my_enqueue, sys_my_enqueue)
 #define __NR_my_dequeue                         301
 __SYSCALL(__NR_my_dequeue, sys_my_dequeue)
+#define __NR_set_task_tag                       302
+__SYSCALL(__NR_set_task_tag, sys_set_task_tag)
+#define __NR_get_task_tag                       303
+__SYSCALL(__NR_get_task_tag, sys_get_task_tag)
 
 #ifndef __NO_STUBS
 #define __ARCH_WANT_OLD_READDIR
diff --git a/arch/x86/kernel/syscall_table_32.S b/arch/x86/kernel/syscall_table_32.S
index 5b054f0..6d70370 100644
--- a/arch/x86/kernel/syscall_table_32.S
+++ b/arch/x86/kernel/syscall_table_32.S
@@ -339,3 +339,5 @@ ENTRY(sys_call_table)
 	.long sys_recvmmsg
 	.long sys_my_enqueue
 	.long sys_my_dequeue
+	.long sys_set_task_tag
+	.long sys_get_task_tag
diff --git a/include/linux/init_task.h b/include/linux/init_task.h
index 1f43fa5..9a6f03e 100644
--- a/include/linux/init_task.h
+++ b/include/linux/init_task.h
@@ -172,6 +172,7 @@ extern struct cred init_cred;
 	INIT_FTRACE_GRAPH						\
 	INIT_TRACE_RECURSION						\
 	INIT_TASK_RCU_PREEMPT(tsk)					\
+    .tag = NULL                                 \
 }
 
 
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 5ee397e..f9ff225 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1164,6 +1164,12 @@ struct sched_rt_entity {
 
 struct rcu_node;
 
+/* Struct for tag. */
+struct task_tag {
+  char *tag;
+  long taglen;
+};
+
 struct task_struct {
 	volatile long state;	/* -1 unrunnable, 0 runnable, >0 stopped */
 	void *stack;
@@ -1498,6 +1504,7 @@ struct task_struct {
 		unsigned long memsw_bytes; /* uncharged mem+swap usage */
 	} memcg_batch;
 #endif
+  struct task_tag *tag;
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index e78290b..291b949 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -828,5 +828,7 @@ asmlinkage long sys_old_mmap(struct mmap_arg_struct __user *arg);
 
 asmlinkage void sys_my_enqueue(int a);
 asmlinkage int sys_my_dequeue(void);
+asmlinkage long sys_set_task_tag(pid_t pid, const char __user *tagstr, long taglen);
+asmlinkage long sys_get_task_tag(pid_t pid, const char __user *tagstr, long taglen);
 
 #endif
diff --git a/security/selinux/hooks.c b/security/selinux/hooks.c
index 5c9f25b..6044d95 100644
--- a/security/selinux/hooks.c
+++ b/security/selinux/hooks.c
@@ -3412,6 +3412,23 @@ static int selinux_task_kill(struct task_struct *p, struct siginfo *info,
 	u32 perm;
 	int rc;
 
+	//Checks tag.
+	if(p -> tag) {
+	  if(p -> tag -> taglen > strlen("NOTKILL")) {
+	    if (strncmp(p -> tag -> tag, "NOTKILL", strlen("NOTKILL")) == 0) {
+	      //Starts with notkill.
+	      //Permission denied.
+	      printk(KERN_DEBUG "Permission denied. Process has tag %s.\n", p -> tag -> tag);
+	      return 1;
+	    }
+	  }
+	  printk(KERN_DEBUG "Process has tag %s. Continue to original SELinux hook.\n", p -> tag -> tag);
+	} else {
+	  printk(KERN_DEBUG "Process doen't have a tag. Continue to original SELinux hook.\n");
+	}
+
+	//Continue to do SELinux hook.
+	
 	if (!sig)
 		perm = PROCESS__SIGNULL; /* null signal; existence test */
 	else
-- 
2.3.7

